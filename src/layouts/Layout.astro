---
import { startViewTransition } from '../utils/navigation'
export interface Props {
	title: string
}

const { title } = Astro.props
---

<!DOCTYPE html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content='Astro description' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<slot />
		<style is:global>
			:root {
				--accent: 124, 58, 237;
				--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
			}
			html {
				font-family: system-ui, sans-serif;
				background-color: #eee;
			}
			code {
				font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
					Bitstream Vera Sans Mono, Courier New, monospace;
			}
		</style>

		<script>
			const checkIsNavigationSupported = () => {
				return Boolean(document.startViewTransition)
			}

			const fetchPage = async (url) => {
				const response = await fetch(url)
				const text = await response.text()

				const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)

				return data
			}

			const startViewTransition = () => {
				if (!checkIsNavigationSupported) return
				window.navigation.addEventListener('navigate', (event) => {
					const toUrl = new URL(event.destination.url)

					if (location.origin !== toUrl.origin) return

					event.intercept({
						async handler() {
							const data = await fetchPage(toUrl.pathname)

							document.startViewTransition(() => {
								document.body.innerHTML = data
								document.documentElement.scrollTop = 0
							})
						}
					})
				})
			}
			startViewTransition();
		</script>
	</body>
</html>
